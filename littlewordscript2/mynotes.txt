statically allocate memory for Line varsets.


internal functions come packaged in class or pair with data for requested number of arguments?

or 

vector is resized to n+1 at compile-time and then pass only the internal array into the Line. if Line requests last then at eval time set last element to last_eval



a=0
b=10
c=12
d=2

a=(b+c)-d ->{

variable x = b+c
a = x-d


}

--------------------------PARTIAL REWRITE--------------------------
For function call:

Line
{
func = lwc::func_call
data = {func_variable, arguments (in num_variable form) ...}
}


---------
Braces are used to define a block or func variable. Any branching will use a similar system, calling in to a function.

:

TO ACQUIRE BLOCKS:
simply identify function calls and check if they have a { if they do, then give their branches a reference to the new codeblock object, then push this reference onto a stack. next time } is found, complete the codeblock and pop its reference off the stack


"elastic" syntax:
use backquotes '`' to denote code that should be interpreted as a literal LAST [eventually using local scope]

----------------------AST COMPLETE-----------------------------
evaluation in MAJOR need of optimization
I suspect that a significant portion of the current slowdown comes from the vectors which are being created in evaluate_line
might be time to switch to static_varset again
